//
// KevView.swift
// Generated by Core Animator version 1.1 on 23/06/15.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

@IBDesignable
class KevView : UIView {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 164, height: 93))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .ScaleToFill:
				break
			case .ScaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransformMakeScale(xScale, yScale)
			scalingView.center = CGPoint(x:CGRectGetMidX(self.bounds), y:CGRectGetMidY(self.bounds))
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = NSBundle(forClass:self.dynamicType)
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:164, height:93)
		__scaling__.center = CGPoint(x:82.3, y:46.7)
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let kev = UIView()
		kev.bounds = CGRect(x:0, y:0, width:151.0, height:84.5)
		kev.layer.position = CGPoint(x:81.361, y:49.653)
		kev.transform = CGAffineTransformMakeRotation(0.046)
		__scaling__.addSubview(kev)
		viewsByName["kev"] = kev

		let leftLeg = UIView()
		leftLeg.bounds = CGRect(x:0, y:0, width:52.8, height:36.9)
		leftLeg.layer.anchorPoint = CGPoint(x:0.091, y:0.016)
		leftLeg.layer.position = CGPoint(x:44.365, y:32.335)
		leftLeg.transform = CGAffineTransformMakeRotation(6.223)
		kev.addSubview(leftLeg)
		viewsByName["left leg"] = leftLeg

		let leftFoot = UIImageView()
		leftFoot.bounds = CGRect(x:0, y:0, width:39.0, height:23.0)
		leftFoot.layer.anchorPoint = CGPoint(x:0.010, y:0.192)
		var imgLeftFoot: UIImage!
		if let imagePath = bundle.pathForResource("left foot.png", ofType:nil) {
			imgLeftFoot = UIImage(contentsOfFile:imagePath)
		}
		leftFoot.image = imgLeftFoot
		leftFoot.contentMode = .Center;
		leftFoot.layer.position = CGPoint(x:13.860, y:17.107)
		leftFoot.transform = CGAffineTransformMakeRotation(6.261)
		leftLeg.addSubview(leftFoot)
		viewsByName["left foot"] = leftFoot

		let leftThigh = UIImageView()
		leftThigh.bounds = CGRect(x:0, y:0, width:23.0, height:22.0)
		var imgLeftThigh: UIImage!
		if let imagePath = bundle.pathForResource("left thigh.png", ofType:nil) {
			imgLeftThigh = UIImage(contentsOfFile:imagePath)
		}
		leftThigh.image = imgLeftThigh
		leftThigh.contentMode = .Center;
		leftThigh.layer.position = CGPoint(x:11.722, y:12.214)
		leftThigh.transform = CGAffineTransformMakeRotation(0.003)
		leftLeg.addSubview(leftThigh)
		viewsByName["left thigh"] = leftThigh

		let body = UIImageView()
		body.bounds = CGRect(x:0, y:0, width:135.0, height:52.0)
		var imgBody: UIImage!
		if let imagePath = bundle.pathForResource("body.png", ofType:nil) {
			imgBody = UIImage(contentsOfFile:imagePath)
		}
		body.image = imgBody
		body.contentMode = .Center;
		body.layer.position = CGPoint(x:83.440, y:26.182)
		body.transform = CGAffineTransformMakeRotation(0.003)
		kev.addSubview(body)
		viewsByName["body"] = body

		let rightLeg = UIView()
		rightLeg.bounds = CGRect(x:0, y:0, width:46.1, height:54.0)
		rightLeg.layer.anchorPoint = CGPoint(x:0.562, y:0.106)
		rightLeg.layer.position = CGPoint(x:24.702, y:36.442)
		kev.addSubview(rightLeg)
		viewsByName["right leg"] = rightLeg

		let rightFoot = UIImageView()
		rightFoot.bounds = CGRect(x:0, y:0, width:27.0, height:38.0)
		rightFoot.layer.anchorPoint = CGPoint(x:0.817, y:0.173)
		var imgRightFoot: UIImage!
		if let imagePath = bundle.pathForResource("right foot.png", ofType:nil) {
			imgRightFoot = UIImage(contentsOfFile:imagePath)
		}
		rightFoot.image = imgRightFoot
		rightFoot.contentMode = .Center;
		rightFoot.layer.position = CGPoint(x:25.449, y:21.293)
		rightFoot.transform = CGAffineTransformMakeRotation(0.580)
		rightLeg.addSubview(rightFoot)
		viewsByName["right foot"] = rightFoot

		let rightThigh = UIImageView()
		rightThigh.bounds = CGRect(x:0, y:0, width:28.0, height:27.0)
		var imgRightThigh: UIImage!
		if let imagePath = bundle.pathForResource("right thigh.png", ofType:nil) {
			imgRightThigh = UIImage(contentsOfFile:imagePath)
		}
		rightThigh.image = imgRightThigh
		rightThigh.contentMode = .Center;
		rightThigh.layer.position = CGPoint(x:30.864, y:13.795)
		rightThigh.transform = CGAffineTransformMakeRotation(0.003)
		rightLeg.addSubview(rightThigh)
		viewsByName["right thigh"] = rightThigh

		self.viewsByName = viewsByName
	}

	// - MARK: fade in

	func addFadeInAnimation() {
		addFadeInAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addFadeInAnimation(completion: ((Bool) -> Void)?) {
		addFadeInAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addFadeInAnimation(#removedOnCompletion: Bool) {
		addFadeInAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addFadeInAnimation(#removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addFadeInAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addFadeInAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.000
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "FadeIn")
			self.animationCompletions[layer.animationForKey("FadeIn")] = complete
		}

		let kevRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		kevRotationAnimation.duration = 1.000
		kevRotationAnimation.values = [-3.177 as Float, 0.046 as Float]
		kevRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		kevRotationAnimation.timingFunctions = [linearTiming]
		kevRotationAnimation.beginTime = beginTime
		kevRotationAnimation.fillMode = fillMode
		kevRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["kev"]?.layer.addAnimation(kevRotationAnimation, forKey:"fade in_Rotation")

		let kevOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		kevOpacityAnimation.duration = 1.000
		kevOpacityAnimation.values = [0.000 as Float, 1.000 as Float]
		kevOpacityAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		kevOpacityAnimation.timingFunctions = [linearTiming]
		kevOpacityAnimation.beginTime = beginTime
		kevOpacityAnimation.fillMode = fillMode
		kevOpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["kev"]?.layer.addAnimation(kevOpacityAnimation, forKey:"fade in_Opacity")

		let kevScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		kevScaleXAnimation.duration = 1.000
		kevScaleXAnimation.values = [0.215 as Float, 1.000 as Float]
		kevScaleXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		kevScaleXAnimation.timingFunctions = [linearTiming]
		kevScaleXAnimation.beginTime = beginTime
		kevScaleXAnimation.fillMode = fillMode
		kevScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["kev"]?.layer.addAnimation(kevScaleXAnimation, forKey:"fade in_ScaleX")

		let kevScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		kevScaleYAnimation.duration = 1.000
		kevScaleYAnimation.values = [0.215 as Float, 1.000 as Float]
		kevScaleYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		kevScaleYAnimation.timingFunctions = [linearTiming]
		kevScaleYAnimation.beginTime = beginTime
		kevScaleYAnimation.fillMode = fillMode
		kevScaleYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["kev"]?.layer.addAnimation(kevScaleYAnimation, forKey:"fade in_ScaleY")

		let kevTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		kevTranslationXAnimation.duration = 1.000
		kevTranslationXAnimation.values = [0.871 as Float, 0.000 as Float]
		kevTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		kevTranslationXAnimation.timingFunctions = [linearTiming]
		kevTranslationXAnimation.beginTime = beginTime
		kevTranslationXAnimation.fillMode = fillMode
		kevTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["kev"]?.layer.addAnimation(kevTranslationXAnimation, forKey:"fade in_TranslationX")

		let kevTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		kevTranslationYAnimation.duration = 1.000
		kevTranslationYAnimation.values = [-36.775 as Float, 0.000 as Float]
		kevTranslationYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		kevTranslationYAnimation.timingFunctions = [linearTiming]
		kevTranslationYAnimation.beginTime = beginTime
		kevTranslationYAnimation.fillMode = fillMode
		kevTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["kev"]?.layer.addAnimation(kevTranslationYAnimation, forKey:"fade in_TranslationY")
	}

	func removeFadeInAnimation() {
		self.layer.removeAnimationForKey("FadeIn")
		self.viewsByName["kev"]?.layer.removeAnimationForKey("fade in_Rotation")
		self.viewsByName["kev"]?.layer.removeAnimationForKey("fade in_Opacity")
		self.viewsByName["kev"]?.layer.removeAnimationForKey("fade in_ScaleX")
		self.viewsByName["kev"]?.layer.removeAnimationForKey("fade in_ScaleY")
		self.viewsByName["kev"]?.layer.removeAnimationForKey("fade in_TranslationX")
		self.viewsByName["kev"]?.layer.removeAnimationForKey("fade in_TranslationY")
	}

	// - MARK: fade out

	func addFadeOutAnimation() {
		addFadeOutAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addFadeOutAnimation(completion: ((Bool) -> Void)?) {
		addFadeOutAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addFadeOutAnimation(#removedOnCompletion: Bool) {
		addFadeOutAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addFadeOutAnimation(#removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addFadeOutAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addFadeOutAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.500
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "FadeOut")
			self.animationCompletions[layer.animationForKey("FadeOut")] = complete
		}

		let kevRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		kevRotationAnimation.duration = 0.500
		kevRotationAnimation.values = [0.046 as Float, -3.177 as Float]
		kevRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		kevRotationAnimation.timingFunctions = [linearTiming]
		kevRotationAnimation.beginTime = beginTime
		kevRotationAnimation.fillMode = fillMode
		kevRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["kev"]?.layer.addAnimation(kevRotationAnimation, forKey:"fade out_Rotation")

		let kevOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		kevOpacityAnimation.duration = 0.500
		kevOpacityAnimation.values = [1.000 as Float, 0.000 as Float]
		kevOpacityAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		kevOpacityAnimation.timingFunctions = [linearTiming]
		kevOpacityAnimation.beginTime = beginTime
		kevOpacityAnimation.fillMode = fillMode
		kevOpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["kev"]?.layer.addAnimation(kevOpacityAnimation, forKey:"fade out_Opacity")

		let kevScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		kevScaleXAnimation.duration = 0.500
		kevScaleXAnimation.values = [1.000 as Float, 0.215 as Float]
		kevScaleXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		kevScaleXAnimation.timingFunctions = [linearTiming]
		kevScaleXAnimation.beginTime = beginTime
		kevScaleXAnimation.fillMode = fillMode
		kevScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["kev"]?.layer.addAnimation(kevScaleXAnimation, forKey:"fade out_ScaleX")

		let kevScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		kevScaleYAnimation.duration = 0.500
		kevScaleYAnimation.values = [1.000 as Float, 0.215 as Float]
		kevScaleYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		kevScaleYAnimation.timingFunctions = [linearTiming]
		kevScaleYAnimation.beginTime = beginTime
		kevScaleYAnimation.fillMode = fillMode
		kevScaleYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["kev"]?.layer.addAnimation(kevScaleYAnimation, forKey:"fade out_ScaleY")

		let kevTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		kevTranslationXAnimation.duration = 0.500
		kevTranslationXAnimation.values = [0.000 as Float, 0.871 as Float]
		kevTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		kevTranslationXAnimation.timingFunctions = [linearTiming]
		kevTranslationXAnimation.beginTime = beginTime
		kevTranslationXAnimation.fillMode = fillMode
		kevTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["kev"]?.layer.addAnimation(kevTranslationXAnimation, forKey:"fade out_TranslationX")

		let kevTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		kevTranslationYAnimation.duration = 0.500
		kevTranslationYAnimation.values = [0.000 as Float, -36.775 as Float]
		kevTranslationYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		kevTranslationYAnimation.timingFunctions = [linearTiming]
		kevTranslationYAnimation.beginTime = beginTime
		kevTranslationYAnimation.fillMode = fillMode
		kevTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["kev"]?.layer.addAnimation(kevTranslationYAnimation, forKey:"fade out_TranslationY")
	}

	func removeFadeOutAnimation() {
		self.layer.removeAnimationForKey("FadeOut")
		self.viewsByName["kev"]?.layer.removeAnimationForKey("fade out_Rotation")
		self.viewsByName["kev"]?.layer.removeAnimationForKey("fade out_Opacity")
		self.viewsByName["kev"]?.layer.removeAnimationForKey("fade out_ScaleX")
		self.viewsByName["kev"]?.layer.removeAnimationForKey("fade out_ScaleY")
		self.viewsByName["kev"]?.layer.removeAnimationForKey("fade out_TranslationX")
		self.viewsByName["kev"]?.layer.removeAnimationForKey("fade out_TranslationY")
	}

	// - MARK: walking

	func addWalkingAnimation() {
		addWalkingAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false)
	}

	func addWalkingAnimation(#removedOnCompletion: Bool) {
		addWalkingAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion)
	}

	func addWalkingAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let easeOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseOut)
		let overshootTiming = CAMediaTimingFunction(controlPoints: 0.00, 0.00, 0.58, 1.30)

		let leftFootRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		leftFootRotationAnimation.duration = 0.750
		leftFootRotationAnimation.values = [6.261 as Float, 6.778 as Float, 6.261 as Float]
		leftFootRotationAnimation.keyTimes = [0.000 as Float, 0.533 as Float, 1.000 as Float]
		leftFootRotationAnimation.timingFunctions = [linearTiming, linearTiming]
		leftFootRotationAnimation.repeatCount = HUGE
		leftFootRotationAnimation.beginTime = beginTime
		leftFootRotationAnimation.fillMode = fillMode
		leftFootRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["left foot"]?.layer.addAnimation(leftFootRotationAnimation, forKey:"walking_Rotation")

		let rightLegRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		rightLegRotationAnimation.duration = 0.750
		rightLegRotationAnimation.values = [0.000 as Float, -0.773 as Float, 0.000 as Float]
		rightLegRotationAnimation.keyTimes = [0.000 as Float, 0.533 as Float, 1.000 as Float]
		rightLegRotationAnimation.timingFunctions = [linearTiming, linearTiming]
		rightLegRotationAnimation.repeatCount = HUGE
		rightLegRotationAnimation.beginTime = beginTime
		rightLegRotationAnimation.fillMode = fillMode
		rightLegRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["right leg"]?.layer.addAnimation(rightLegRotationAnimation, forKey:"walking_Rotation")

		let kevRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		kevRotationAnimation.duration = 0.750
		kevRotationAnimation.values = [0.046 as Float, 0.130 as Float, 0.046 as Float]
		kevRotationAnimation.keyTimes = [0.000 as Float, 0.533 as Float, 1.000 as Float]
		kevRotationAnimation.timingFunctions = [overshootTiming, easeOutTiming]
		kevRotationAnimation.repeatCount = HUGE
		kevRotationAnimation.beginTime = beginTime
		kevRotationAnimation.fillMode = fillMode
		kevRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["kev"]?.layer.addAnimation(kevRotationAnimation, forKey:"walking_Rotation")

		let rightFootRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		rightFootRotationAnimation.duration = 0.750
		rightFootRotationAnimation.values = [0.580 as Float, -0.833 as Float, 0.580 as Float]
		rightFootRotationAnimation.keyTimes = [0.000 as Float, 0.533 as Float, 1.000 as Float]
		rightFootRotationAnimation.timingFunctions = [linearTiming, linearTiming]
		rightFootRotationAnimation.repeatCount = HUGE
		rightFootRotationAnimation.beginTime = beginTime
		rightFootRotationAnimation.fillMode = fillMode
		rightFootRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["right foot"]?.layer.addAnimation(rightFootRotationAnimation, forKey:"walking_Rotation")

		let leftLegRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		leftLegRotationAnimation.duration = 0.750
		leftLegRotationAnimation.values = [6.223 as Float, 8.104 as Float, 6.223 as Float]
		leftLegRotationAnimation.keyTimes = [0.000 as Float, 0.533 as Float, 1.000 as Float]
		leftLegRotationAnimation.timingFunctions = [linearTiming, linearTiming]
		leftLegRotationAnimation.repeatCount = HUGE
		leftLegRotationAnimation.beginTime = beginTime
		leftLegRotationAnimation.fillMode = fillMode
		leftLegRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["left leg"]?.layer.addAnimation(leftLegRotationAnimation, forKey:"walking_Rotation")
	}

	func removeWalkingAnimation() {
		self.viewsByName["left foot"]?.layer.removeAnimationForKey("walking_Rotation")
		self.viewsByName["right leg"]?.layer.removeAnimationForKey("walking_Rotation")
		self.viewsByName["kev"]?.layer.removeAnimationForKey("walking_Rotation")
		self.viewsByName["right foot"]?.layer.removeAnimationForKey("walking_Rotation")
		self.viewsByName["left leg"]?.layer.removeAnimationForKey("walking_Rotation")
	}

	override func animationDidStop(anim: CAAnimation!, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValueForKey(anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimationForKey("FadeOut")
		self.layer.removeAnimationForKey("FadeIn")
	}
}